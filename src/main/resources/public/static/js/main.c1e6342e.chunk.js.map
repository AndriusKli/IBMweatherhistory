{"version":3,"sources":["components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","props","dateTime","temperature","App","useState","weather","setWeather","currentPage","offset","cardsPerPage","state","setState","totalPaginationPages","Math","ceil","length","currentlyVisibleCards","sort","a","b","slice","useEffect","Axios","get","then","response","data","map","entry","key","id","Date","toLocaleString","Pagination","style","display","alignItems","justifyContent","paddingTop","count","siblingCount","onChange","event","value","preventDefault","page","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iSAeeA,MAbf,SAAqBC,GACjB,OAGQ,4BACI,4BAAKA,EAAMC,UACX,4BAAKD,EAAME,YAAX,Y,QC0EDC,MA3Ef,WAAgB,IAAD,EAEiBC,mBAAS,CACrCC,QAAS,KAHE,mBAENA,EAFM,KAEGC,EAFH,OAMaF,mBAAS,CACjCG,YAAa,EACbC,OAAQ,EACRC,aAAc,KATH,mBAMNC,EANM,KAMCC,EAND,KAsBPC,EAAuBC,KAAKC,KAAKT,EAAQA,QAAQU,OAASL,EAAMD,cAChEO,EAAwBX,EAAQA,QAAQY,MAX9B,SAACC,EAAGC,GAClB,OAAID,EAAEjB,SAAWkB,EAAElB,SACV,EACEiB,EAAEjB,SAAWkB,EAAElB,UAChB,EAED,KAKiDmB,MAAMV,EAAMF,OAAQE,EAAMH,YAAcG,EAAMD,cAmB1G,OARAY,qBAAU,WACRC,IAAMC,IAAI,qCAAqCC,MAAK,SAAAC,GAClDnB,EAAW,CACTD,QAASoB,EAASC,YAGrB,IAGD,6BACE,0DACA,+BACE,+BACE,4BACE,oCACA,4CAGDV,EAAsBW,KAAI,SAAAC,GAAK,OAC9B,kBAAC,EAAD,CACEC,IAAKD,EAAME,GACX5B,YAAa0B,EAAM1B,YACnBD,SAAU,IAAI8B,KAAKH,EAAM3B,UAAU+B,eAAe,gBAM1D,6BACE,kBAACC,EAAA,EAAD,CAAYC,MAAO,CACjBC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,WAAY,MACXC,MAAO3B,EAAsB4B,aAAc,EAAGC,SA3C9B,SAACC,EAAOC,GAC/BD,EAAME,iBACNjC,EAAS,2BACJD,GADG,IAENH,YAAaoC,EACbnC,QAASmC,EAAQ,GAAKjC,EAAMD,iBAsCmDoC,KAAMnC,EAAMH,YAAauC,KAAK,aC/D/FC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c1e6342e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nfunction WeatherCard(props) {\r\n    return (\r\n       \r\n\r\n            <tr>\r\n                <td>{props.dateTime}</td>\r\n                <td>{props.temperature} Â°C</td>\r\n            </tr>\r\n\r\n    \r\n    )\r\n}\r\n\r\nexport default WeatherCard;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport WeatherCard from './components/WeatherCard'\nimport Pagination from '@material-ui/lab/Pagination'\n\n\nfunction App() {\n\n  const [weather, setWeather] = useState({\n    weather: []\n  });\n\n  const [state, setState] = useState({\n    currentPage: 1,\n    offset: 0,\n    cardsPerPage: 20,\n  });\n\n  const compare = (a, b) => {\n    if (a.dateTime < b.dateTime) {\n      return 1;\n    } else if (a.dateTime > b.dateTime) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  const totalPaginationPages = Math.ceil(weather.weather.length / state.cardsPerPage);\n  const currentlyVisibleCards = weather.weather.sort(compare).slice(state.offset, state.currentPage * state.cardsPerPage)\n\n  const handlePageChange = (event, value) => {\n    event.preventDefault();\n    setState({\n      ...state,\n      currentPage: value,\n      offset: (value - 1) * state.cardsPerPage\n    })\n  }\n\n  useEffect(() => {\n    Axios.get(\"http://localhost:8080/api/weather\").then(response => {\n      setWeather({\n        weather: response.data\n      });\n    })\n  }, [])\n\n  return (\n    <div>\n      <h1>Weather history in Vilnius</h1>\n      <table>\n        <tbody>\n          <tr>\n            <th>Time</th>\n            <th>Temperature</th>\n          </tr>\n\n          {currentlyVisibleCards.map(entry =>\n            <WeatherCard\n              key={entry.id}\n              temperature={entry.temperature}\n              dateTime={new Date(entry.dateTime).toLocaleString(\"lt-LT\")} />\n          )}\n\n        </tbody>\n      </table>\n\n      <div>\n        <Pagination style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          paddingTop: '2%'\n        }} count={totalPaginationPages} siblingCount={1} onChange={handlePageChange} page={state.currentPage} size=\"large\" />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}